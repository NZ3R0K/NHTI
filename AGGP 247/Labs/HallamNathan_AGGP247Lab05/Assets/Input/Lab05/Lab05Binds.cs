//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/Lab05/Lab05Binds.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Lab05Binds : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Lab05Binds()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Lab05Binds"",
    ""maps"": [
        {
            ""name"": ""General"",
            ""id"": ""abf78008-0cd2-475f-8ecc-3fe6e6d66b40"",
            ""actions"": [
                {
                    ""name"": ""SwitchScene"",
                    ""type"": ""Button"",
                    ""id"": ""059ad9b7-cc48-4b4c-872e-9aa447ff010b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""37801eeb-824e-41e4-9ee1-d7b90b372888"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SwitchScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Ship"",
            ""id"": ""e568a179-b252-4ad5-bcf1-e07cf9fb634e"",
            ""actions"": [
                {
                    ""name"": ""Thrust"",
                    ""type"": ""Button"",
                    ""id"": ""af377faf-b056-44a9-96aa-aea194420acf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""901de2e7-6486-49fc-a525-3ac07bb9cdad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Thrust WS"",
                    ""id"": ""f9d12682-ea8f-4822-b2a7-148ea0c3424c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""44ac74ea-3f33-4f3d-89d9-cd6b433c6650"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7a470152-6106-47a3-9883-fd8dbfa846fb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Rotate AD"",
                    ""id"": ""8e2c0d00-0501-4342-93c3-5a4c14a7dc0a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6ba4b989-d659-46c4-97e6-3a0ed68762c4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d9a0ba8b-5d58-4021-a312-38de5fdad992"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Cannon"",
            ""id"": ""b4e4f050-63ae-496d-8063-616599ad9908"",
            ""actions"": [
                {
                    ""name"": ""ChangePower"",
                    ""type"": ""Button"",
                    ""id"": ""c7680e5e-96a0-4d0e-8584-aa952909fdf1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""b378b63b-f19b-4daa-aa40-44163a391d1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""c9eff03f-b424-491c-b840-6e624df54b3a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""A/S"",
                    ""id"": ""8920970d-8ba9-4056-9a49-2a0307ff8846"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5ee5b5de-0c48-4f2f-8b8d-66124cc38b5c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""65c7f8cf-7534-4f7d-9d2e-73767f3f2f00"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""bed3bbf5-5acb-491f-b75b-912c22bf6492"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""W/S"",
                    ""id"": ""0db0ede7-3714-48b9-af89-f833201741d5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangePower"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""01e6d7b1-d392-44fd-905d-f1a249e1db92"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChangePower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""01b0207a-e9d3-4e1f-92c1-a60947632678"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChangePower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // General
        m_General = asset.FindActionMap("General", throwIfNotFound: true);
        m_General_SwitchScene = m_General.FindAction("SwitchScene", throwIfNotFound: true);
        // Ship
        m_Ship = asset.FindActionMap("Ship", throwIfNotFound: true);
        m_Ship_Thrust = m_Ship.FindAction("Thrust", throwIfNotFound: true);
        m_Ship_Rotate = m_Ship.FindAction("Rotate", throwIfNotFound: true);
        // Cannon
        m_Cannon = asset.FindActionMap("Cannon", throwIfNotFound: true);
        m_Cannon_ChangePower = m_Cannon.FindAction("ChangePower", throwIfNotFound: true);
        m_Cannon_Rotate = m_Cannon.FindAction("Rotate", throwIfNotFound: true);
        m_Cannon_Shoot = m_Cannon.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // General
    private readonly InputActionMap m_General;
    private IGeneralActions m_GeneralActionsCallbackInterface;
    private readonly InputAction m_General_SwitchScene;
    public struct GeneralActions
    {
        private @Lab05Binds m_Wrapper;
        public GeneralActions(@Lab05Binds wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchScene => m_Wrapper.m_General_SwitchScene;
        public InputActionMap Get() { return m_Wrapper.m_General; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralActions set) { return set.Get(); }
        public void SetCallbacks(IGeneralActions instance)
        {
            if (m_Wrapper.m_GeneralActionsCallbackInterface != null)
            {
                @SwitchScene.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnSwitchScene;
                @SwitchScene.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnSwitchScene;
                @SwitchScene.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnSwitchScene;
            }
            m_Wrapper.m_GeneralActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SwitchScene.started += instance.OnSwitchScene;
                @SwitchScene.performed += instance.OnSwitchScene;
                @SwitchScene.canceled += instance.OnSwitchScene;
            }
        }
    }
    public GeneralActions @General => new GeneralActions(this);

    // Ship
    private readonly InputActionMap m_Ship;
    private IShipActions m_ShipActionsCallbackInterface;
    private readonly InputAction m_Ship_Thrust;
    private readonly InputAction m_Ship_Rotate;
    public struct ShipActions
    {
        private @Lab05Binds m_Wrapper;
        public ShipActions(@Lab05Binds wrapper) { m_Wrapper = wrapper; }
        public InputAction @Thrust => m_Wrapper.m_Ship_Thrust;
        public InputAction @Rotate => m_Wrapper.m_Ship_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_Ship; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShipActions set) { return set.Get(); }
        public void SetCallbacks(IShipActions instance)
        {
            if (m_Wrapper.m_ShipActionsCallbackInterface != null)
            {
                @Thrust.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnThrust;
                @Thrust.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnThrust;
                @Thrust.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnThrust;
                @Rotate.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnRotate;
            }
            m_Wrapper.m_ShipActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Thrust.started += instance.OnThrust;
                @Thrust.performed += instance.OnThrust;
                @Thrust.canceled += instance.OnThrust;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
            }
        }
    }
    public ShipActions @Ship => new ShipActions(this);

    // Cannon
    private readonly InputActionMap m_Cannon;
    private ICannonActions m_CannonActionsCallbackInterface;
    private readonly InputAction m_Cannon_ChangePower;
    private readonly InputAction m_Cannon_Rotate;
    private readonly InputAction m_Cannon_Shoot;
    public struct CannonActions
    {
        private @Lab05Binds m_Wrapper;
        public CannonActions(@Lab05Binds wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangePower => m_Wrapper.m_Cannon_ChangePower;
        public InputAction @Rotate => m_Wrapper.m_Cannon_Rotate;
        public InputAction @Shoot => m_Wrapper.m_Cannon_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_Cannon; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CannonActions set) { return set.Get(); }
        public void SetCallbacks(ICannonActions instance)
        {
            if (m_Wrapper.m_CannonActionsCallbackInterface != null)
            {
                @ChangePower.started -= m_Wrapper.m_CannonActionsCallbackInterface.OnChangePower;
                @ChangePower.performed -= m_Wrapper.m_CannonActionsCallbackInterface.OnChangePower;
                @ChangePower.canceled -= m_Wrapper.m_CannonActionsCallbackInterface.OnChangePower;
                @Rotate.started -= m_Wrapper.m_CannonActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_CannonActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_CannonActionsCallbackInterface.OnRotate;
                @Shoot.started -= m_Wrapper.m_CannonActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_CannonActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_CannonActionsCallbackInterface.OnShoot;
            }
            m_Wrapper.m_CannonActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangePower.started += instance.OnChangePower;
                @ChangePower.performed += instance.OnChangePower;
                @ChangePower.canceled += instance.OnChangePower;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
            }
        }
    }
    public CannonActions @Cannon => new CannonActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IGeneralActions
    {
        void OnSwitchScene(InputAction.CallbackContext context);
    }
    public interface IShipActions
    {
        void OnThrust(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
    }
    public interface ICannonActions
    {
        void OnChangePower(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
