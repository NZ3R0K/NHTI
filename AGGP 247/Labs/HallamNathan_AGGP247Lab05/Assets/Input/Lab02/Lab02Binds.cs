//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/Lab02/Lab02Binds.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Lab02Binds : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Lab02Binds()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Lab02Binds"",
    ""maps"": [
        {
            ""name"": ""Grid"",
            ""id"": ""3fcd3e09-845f-4f2b-9c39-e3ce48cf5252"",
            ""actions"": [
                {
                    ""name"": ""Gridsize"",
                    ""type"": ""Value"",
                    ""id"": ""9b27d70f-6216-4e5d-a1f5-812472e5b04c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Division Count"",
                    ""type"": ""Value"",
                    ""id"": ""98a79147-5a62-4506-b6bc-7d13f4587ab9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Place Origin"",
                    ""type"": ""Button"",
                    ""id"": ""e061772d-df10-41e6-8b1f-fd89f0e4437c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle Origin"",
                    ""type"": ""Button"",
                    ""id"": ""a286922a-279a-441b-8b70-88f56234fb90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle Axis"",
                    ""type"": ""Button"",
                    ""id"": ""5d15b9c9-478c-4416-8c57-44d6962ce4e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle Dividers"",
                    ""type"": ""Button"",
                    ""id"": ""5f350251-6fe0-4b2a-95a2-7a9eb04e70f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleShapes"",
                    ""type"": ""Button"",
                    ""id"": ""887ad525-1ae9-47c8-b87c-17107da0e933"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleParabolas"",
                    ""type"": ""Button"",
                    ""id"": ""e625c2ae-2ef2-45af-af77-19dae081d18b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Modifier"",
                    ""type"": ""Button"",
                    ""id"": ""9ba43401-b304-4881-8fd9-eaf835cefefc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cursor"",
                    ""type"": ""Value"",
                    ""id"": ""122b3a2d-eb08-4918-a10a-08afbc6c3392"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""LCTRL + Scroll"",
                    ""id"": ""fc5973ce-bcd3-44ca-ae3b-235fd452cc3f"",
                    ""path"": ""ButtonWithOneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Division Count"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""bab8f0f8-6add-40b2-9abb-79c5a575871c"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Division Count"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""button"",
                    ""id"": ""e6fce628-08c9-4e04-8c1d-bffdd7c2163c"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Division Count"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""07bd2e05-31bc-484c-91a4-4206ff35dfa8"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Toggle Origin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85c6110e-b719-41b4-bed3-700d2b009561"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Toggle Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ed9600c-a409-4488-b638-730d1383da56"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Toggle Dividers"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39f86791-ccce-4958-876e-b254c5d4d5d0"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Place Origin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b117d8ad-3fa9-4d3c-be73-d19af7333d5f"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Gridsize"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55277e0c-bcc6-4766-8a50-278c9173555b"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Modifier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c32271a2-20a6-4b2f-b931-4e06826d04f0"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""278a41c6-746c-429b-b358-b73681d286ae"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ToggleParabolas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6c17ead-cdd7-46e5-8163-4d4af4f185cb"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleShapes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Grid
        m_Grid = asset.FindActionMap("Grid", throwIfNotFound: true);
        m_Grid_Gridsize = m_Grid.FindAction("Gridsize", throwIfNotFound: true);
        m_Grid_DivisionCount = m_Grid.FindAction("Division Count", throwIfNotFound: true);
        m_Grid_PlaceOrigin = m_Grid.FindAction("Place Origin", throwIfNotFound: true);
        m_Grid_ToggleOrigin = m_Grid.FindAction("Toggle Origin", throwIfNotFound: true);
        m_Grid_ToggleAxis = m_Grid.FindAction("Toggle Axis", throwIfNotFound: true);
        m_Grid_ToggleDividers = m_Grid.FindAction("Toggle Dividers", throwIfNotFound: true);
        m_Grid_ToggleShapes = m_Grid.FindAction("ToggleShapes", throwIfNotFound: true);
        m_Grid_ToggleParabolas = m_Grid.FindAction("ToggleParabolas", throwIfNotFound: true);
        m_Grid_Modifier = m_Grid.FindAction("Modifier", throwIfNotFound: true);
        m_Grid_Cursor = m_Grid.FindAction("Cursor", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Grid
    private readonly InputActionMap m_Grid;
    private IGridActions m_GridActionsCallbackInterface;
    private readonly InputAction m_Grid_Gridsize;
    private readonly InputAction m_Grid_DivisionCount;
    private readonly InputAction m_Grid_PlaceOrigin;
    private readonly InputAction m_Grid_ToggleOrigin;
    private readonly InputAction m_Grid_ToggleAxis;
    private readonly InputAction m_Grid_ToggleDividers;
    private readonly InputAction m_Grid_ToggleShapes;
    private readonly InputAction m_Grid_ToggleParabolas;
    private readonly InputAction m_Grid_Modifier;
    private readonly InputAction m_Grid_Cursor;
    public struct GridActions
    {
        private @Lab02Binds m_Wrapper;
        public GridActions(@Lab02Binds wrapper) { m_Wrapper = wrapper; }
        public InputAction @Gridsize => m_Wrapper.m_Grid_Gridsize;
        public InputAction @DivisionCount => m_Wrapper.m_Grid_DivisionCount;
        public InputAction @PlaceOrigin => m_Wrapper.m_Grid_PlaceOrigin;
        public InputAction @ToggleOrigin => m_Wrapper.m_Grid_ToggleOrigin;
        public InputAction @ToggleAxis => m_Wrapper.m_Grid_ToggleAxis;
        public InputAction @ToggleDividers => m_Wrapper.m_Grid_ToggleDividers;
        public InputAction @ToggleShapes => m_Wrapper.m_Grid_ToggleShapes;
        public InputAction @ToggleParabolas => m_Wrapper.m_Grid_ToggleParabolas;
        public InputAction @Modifier => m_Wrapper.m_Grid_Modifier;
        public InputAction @Cursor => m_Wrapper.m_Grid_Cursor;
        public InputActionMap Get() { return m_Wrapper.m_Grid; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GridActions set) { return set.Get(); }
        public void SetCallbacks(IGridActions instance)
        {
            if (m_Wrapper.m_GridActionsCallbackInterface != null)
            {
                @Gridsize.started -= m_Wrapper.m_GridActionsCallbackInterface.OnGridsize;
                @Gridsize.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnGridsize;
                @Gridsize.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnGridsize;
                @DivisionCount.started -= m_Wrapper.m_GridActionsCallbackInterface.OnDivisionCount;
                @DivisionCount.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnDivisionCount;
                @DivisionCount.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnDivisionCount;
                @PlaceOrigin.started -= m_Wrapper.m_GridActionsCallbackInterface.OnPlaceOrigin;
                @PlaceOrigin.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnPlaceOrigin;
                @PlaceOrigin.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnPlaceOrigin;
                @ToggleOrigin.started -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleOrigin;
                @ToggleOrigin.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleOrigin;
                @ToggleOrigin.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleOrigin;
                @ToggleAxis.started -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleAxis;
                @ToggleAxis.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleAxis;
                @ToggleAxis.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleAxis;
                @ToggleDividers.started -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleDividers;
                @ToggleDividers.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleDividers;
                @ToggleDividers.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleDividers;
                @ToggleShapes.started -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleShapes;
                @ToggleShapes.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleShapes;
                @ToggleShapes.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleShapes;
                @ToggleParabolas.started -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleParabolas;
                @ToggleParabolas.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleParabolas;
                @ToggleParabolas.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleParabolas;
                @Modifier.started -= m_Wrapper.m_GridActionsCallbackInterface.OnModifier;
                @Modifier.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnModifier;
                @Modifier.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnModifier;
                @Cursor.started -= m_Wrapper.m_GridActionsCallbackInterface.OnCursor;
                @Cursor.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnCursor;
                @Cursor.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnCursor;
            }
            m_Wrapper.m_GridActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Gridsize.started += instance.OnGridsize;
                @Gridsize.performed += instance.OnGridsize;
                @Gridsize.canceled += instance.OnGridsize;
                @DivisionCount.started += instance.OnDivisionCount;
                @DivisionCount.performed += instance.OnDivisionCount;
                @DivisionCount.canceled += instance.OnDivisionCount;
                @PlaceOrigin.started += instance.OnPlaceOrigin;
                @PlaceOrigin.performed += instance.OnPlaceOrigin;
                @PlaceOrigin.canceled += instance.OnPlaceOrigin;
                @ToggleOrigin.started += instance.OnToggleOrigin;
                @ToggleOrigin.performed += instance.OnToggleOrigin;
                @ToggleOrigin.canceled += instance.OnToggleOrigin;
                @ToggleAxis.started += instance.OnToggleAxis;
                @ToggleAxis.performed += instance.OnToggleAxis;
                @ToggleAxis.canceled += instance.OnToggleAxis;
                @ToggleDividers.started += instance.OnToggleDividers;
                @ToggleDividers.performed += instance.OnToggleDividers;
                @ToggleDividers.canceled += instance.OnToggleDividers;
                @ToggleShapes.started += instance.OnToggleShapes;
                @ToggleShapes.performed += instance.OnToggleShapes;
                @ToggleShapes.canceled += instance.OnToggleShapes;
                @ToggleParabolas.started += instance.OnToggleParabolas;
                @ToggleParabolas.performed += instance.OnToggleParabolas;
                @ToggleParabolas.canceled += instance.OnToggleParabolas;
                @Modifier.started += instance.OnModifier;
                @Modifier.performed += instance.OnModifier;
                @Modifier.canceled += instance.OnModifier;
                @Cursor.started += instance.OnCursor;
                @Cursor.performed += instance.OnCursor;
                @Cursor.canceled += instance.OnCursor;
            }
        }
    }
    public GridActions @Grid => new GridActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IGridActions
    {
        void OnGridsize(InputAction.CallbackContext context);
        void OnDivisionCount(InputAction.CallbackContext context);
        void OnPlaceOrigin(InputAction.CallbackContext context);
        void OnToggleOrigin(InputAction.CallbackContext context);
        void OnToggleAxis(InputAction.CallbackContext context);
        void OnToggleDividers(InputAction.CallbackContext context);
        void OnToggleShapes(InputAction.CallbackContext context);
        void OnToggleParabolas(InputAction.CallbackContext context);
        void OnModifier(InputAction.CallbackContext context);
        void OnCursor(InputAction.CallbackContext context);
    }
}
