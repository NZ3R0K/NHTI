//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/Lab03/Lab03Binds.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Lab03Binds : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Lab03Binds()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Lab03Binds"",
    ""maps"": [
        {
            ""name"": ""Grid"",
            ""id"": ""3fcd3e09-845f-4f2b-9c39-e3ce48cf5252"",
            ""actions"": [
                {
                    ""name"": ""Gridsize"",
                    ""type"": ""Value"",
                    ""id"": ""9b27d70f-6216-4e5d-a1f5-812472e5b04c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Division Count"",
                    ""type"": ""Value"",
                    ""id"": ""98a79147-5a62-4506-b6bc-7d13f4587ab9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Place Origin"",
                    ""type"": ""Button"",
                    ""id"": ""e061772d-df10-41e6-8b1f-fd89f0e4437c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle Origin"",
                    ""type"": ""Button"",
                    ""id"": ""a286922a-279a-441b-8b70-88f56234fb90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle Axis"",
                    ""type"": ""Button"",
                    ""id"": ""5d15b9c9-478c-4416-8c57-44d6962ce4e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toggle Dividers"",
                    ""type"": ""Button"",
                    ""id"": ""5f350251-6fe0-4b2a-95a2-7a9eb04e70f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Modifier"",
                    ""type"": ""Button"",
                    ""id"": ""9ba43401-b304-4881-8fd9-eaf835cefefc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cursor"",
                    ""type"": ""Value"",
                    ""id"": ""122b3a2d-eb08-4918-a10a-08afbc6c3392"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangeDrawingGroup"",
                    ""type"": ""Button"",
                    ""id"": ""424b45e3-cf6f-4053-b1da-c5a3ce35032b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""LCTRL + Scroll"",
                    ""id"": ""fc5973ce-bcd3-44ca-ae3b-235fd452cc3f"",
                    ""path"": ""ButtonWithOneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Division Count"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""bab8f0f8-6add-40b2-9abb-79c5a575871c"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Division Count"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""button"",
                    ""id"": ""e6fce628-08c9-4e04-8c1d-bffdd7c2163c"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Division Count"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""07bd2e05-31bc-484c-91a4-4206ff35dfa8"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Toggle Origin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85c6110e-b719-41b4-bed3-700d2b009561"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Toggle Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ed9600c-a409-4488-b638-730d1383da56"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Toggle Dividers"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39f86791-ccce-4958-876e-b254c5d4d5d0"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Place Origin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b117d8ad-3fa9-4d3c-be73-d19af7333d5f"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Gridsize"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55277e0c-bcc6-4766-8a50-278c9173555b"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Modifier"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c32271a2-20a6-4b2f-b931-4e06826d04f0"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2f2cca3-d2bb-4f3e-aace-2f1eebf699f5"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeDrawingGroup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Default"",
            ""id"": ""c4c0d5dd-7a77-4620-8f33-3cac373d6e19"",
            ""actions"": [
                {
                    ""name"": ""ToggleShapes"",
                    ""type"": ""Button"",
                    ""id"": ""f7370537-862a-412a-8f67-39a2ec62e1e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleParabolas"",
                    ""type"": ""Button"",
                    ""id"": ""b45c85bd-2250-44b3-9d41-2f9fb257ab64"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e1ebff68-12ef-4651-bad5-cdf855d1f430"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ToggleShapes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf55dcc4-cf8a-4269-8331-0bb838260618"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ToggleParabolas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Circle"",
            ""id"": ""cac58faf-561e-4b53-a564-fd9c92049207"",
            ""actions"": [
                {
                    ""name"": ""ToggleCricle"",
                    ""type"": ""Button"",
                    ""id"": ""8547a4cf-44ec-40b1-a2c7-3709036c57e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveCircle"",
                    ""type"": ""Button"",
                    ""id"": ""abd5056e-4408-41d3-9b77-722eb66d0a14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeRadius"",
                    ""type"": ""Button"",
                    ""id"": ""24e7fcde-3f03-4e09-95e2-6b16f24cccf3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangeSideCount"",
                    ""type"": ""Button"",
                    ""id"": ""0eef128b-34ab-4d5a-9399-7cc1c342eaee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cb221ceb-98f5-45f7-a2b2-5fd882cbe0a4"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ToggleCricle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5ea1493-a5f2-4153-ab55-e471f045bf88"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveCircle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""684cd179-4e50-4181-b542-43e1347bd4cb"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeRadius"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""764aba6f-9a51-4956-b7ca-ec7a1900bd34"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChangeRadius"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""dd82f728-c878-49da-ae3e-29a5670db439"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChangeRadius"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""15bf688d-8c3c-4ee6-a848-f65311a2bedd"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeSideCount"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""56b397b6-809b-42bc-a791-22a96a2acb75"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChangeSideCount"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5dc630cf-bdf0-4b94-a101-fc6eb0dfae72"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChangeSideCount"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Ellipse"",
            ""id"": ""bc53432b-ad5d-4067-84d7-3bc9b85f276e"",
            ""actions"": [
                {
                    ""name"": ""ToggleEllipse"",
                    ""type"": ""Button"",
                    ""id"": ""c2625937-e0f1-4590-875f-20d9ab8cb8e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveEllipse"",
                    ""type"": ""Button"",
                    ""id"": ""e9118c06-3e2e-45ef-8366-b08041b76829"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeHorizontalAxis"",
                    ""type"": ""Button"",
                    ""id"": ""19476eb1-f8a8-4e16-8f98-2f18d233b2eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeVerticalAxis"",
                    ""type"": ""Button"",
                    ""id"": ""63473075-14ad-4bd1-9c75-f6206ae1e90f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeSideCount"",
                    ""type"": ""Button"",
                    ""id"": ""f2501961-e930-4eac-accd-d3850a28baf2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a3340b5a-2642-40f1-8096-e4fd0e64cd2f"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ToggleEllipse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97d17694-abea-4841-b49b-5ad1341afd23"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveEllipse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""0924549e-9811-4847-86c2-27cf9a52a028"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeHorizontalAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""89b50113-6705-4ea2-ac6a-55aeb9cb4467"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChangeHorizontalAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""23a2c792-c8f0-4250-9e84-6cf3f350ff14"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChangeHorizontalAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""649911ea-437f-4063-9091-6c0cabb406a9"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeVerticalAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e7a7322f-7ce8-4bf7-9246-e1a92a8b1d20"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChangeVerticalAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0cfafbfb-7706-45ed-9073-6b0be745ce24"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChangeVerticalAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""95f48317-5643-4865-b5cd-767c699eb32b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeSideCount"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2d12c1b1-1081-4660-a300-cf4db2fb57a8"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChangeSideCount"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a452da5b-40b7-4493-a0e0-b37d5b7c7f8c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ChangeSideCount"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Grid
        m_Grid = asset.FindActionMap("Grid", throwIfNotFound: true);
        m_Grid_Gridsize = m_Grid.FindAction("Gridsize", throwIfNotFound: true);
        m_Grid_DivisionCount = m_Grid.FindAction("Division Count", throwIfNotFound: true);
        m_Grid_PlaceOrigin = m_Grid.FindAction("Place Origin", throwIfNotFound: true);
        m_Grid_ToggleOrigin = m_Grid.FindAction("Toggle Origin", throwIfNotFound: true);
        m_Grid_ToggleAxis = m_Grid.FindAction("Toggle Axis", throwIfNotFound: true);
        m_Grid_ToggleDividers = m_Grid.FindAction("Toggle Dividers", throwIfNotFound: true);
        m_Grid_Modifier = m_Grid.FindAction("Modifier", throwIfNotFound: true);
        m_Grid_Cursor = m_Grid.FindAction("Cursor", throwIfNotFound: true);
        m_Grid_ChangeDrawingGroup = m_Grid.FindAction("ChangeDrawingGroup", throwIfNotFound: true);
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_ToggleShapes = m_Default.FindAction("ToggleShapes", throwIfNotFound: true);
        m_Default_ToggleParabolas = m_Default.FindAction("ToggleParabolas", throwIfNotFound: true);
        // Circle
        m_Circle = asset.FindActionMap("Circle", throwIfNotFound: true);
        m_Circle_ToggleCricle = m_Circle.FindAction("ToggleCricle", throwIfNotFound: true);
        m_Circle_MoveCircle = m_Circle.FindAction("MoveCircle", throwIfNotFound: true);
        m_Circle_ChangeRadius = m_Circle.FindAction("ChangeRadius", throwIfNotFound: true);
        m_Circle_ChangeSideCount = m_Circle.FindAction("ChangeSideCount", throwIfNotFound: true);
        // Ellipse
        m_Ellipse = asset.FindActionMap("Ellipse", throwIfNotFound: true);
        m_Ellipse_ToggleEllipse = m_Ellipse.FindAction("ToggleEllipse", throwIfNotFound: true);
        m_Ellipse_MoveEllipse = m_Ellipse.FindAction("MoveEllipse", throwIfNotFound: true);
        m_Ellipse_ChangeHorizontalAxis = m_Ellipse.FindAction("ChangeHorizontalAxis", throwIfNotFound: true);
        m_Ellipse_ChangeVerticalAxis = m_Ellipse.FindAction("ChangeVerticalAxis", throwIfNotFound: true);
        m_Ellipse_ChangeSideCount = m_Ellipse.FindAction("ChangeSideCount", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Grid
    private readonly InputActionMap m_Grid;
    private IGridActions m_GridActionsCallbackInterface;
    private readonly InputAction m_Grid_Gridsize;
    private readonly InputAction m_Grid_DivisionCount;
    private readonly InputAction m_Grid_PlaceOrigin;
    private readonly InputAction m_Grid_ToggleOrigin;
    private readonly InputAction m_Grid_ToggleAxis;
    private readonly InputAction m_Grid_ToggleDividers;
    private readonly InputAction m_Grid_Modifier;
    private readonly InputAction m_Grid_Cursor;
    private readonly InputAction m_Grid_ChangeDrawingGroup;
    public struct GridActions
    {
        private @Lab03Binds m_Wrapper;
        public GridActions(@Lab03Binds wrapper) { m_Wrapper = wrapper; }
        public InputAction @Gridsize => m_Wrapper.m_Grid_Gridsize;
        public InputAction @DivisionCount => m_Wrapper.m_Grid_DivisionCount;
        public InputAction @PlaceOrigin => m_Wrapper.m_Grid_PlaceOrigin;
        public InputAction @ToggleOrigin => m_Wrapper.m_Grid_ToggleOrigin;
        public InputAction @ToggleAxis => m_Wrapper.m_Grid_ToggleAxis;
        public InputAction @ToggleDividers => m_Wrapper.m_Grid_ToggleDividers;
        public InputAction @Modifier => m_Wrapper.m_Grid_Modifier;
        public InputAction @Cursor => m_Wrapper.m_Grid_Cursor;
        public InputAction @ChangeDrawingGroup => m_Wrapper.m_Grid_ChangeDrawingGroup;
        public InputActionMap Get() { return m_Wrapper.m_Grid; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GridActions set) { return set.Get(); }
        public void SetCallbacks(IGridActions instance)
        {
            if (m_Wrapper.m_GridActionsCallbackInterface != null)
            {
                @Gridsize.started -= m_Wrapper.m_GridActionsCallbackInterface.OnGridsize;
                @Gridsize.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnGridsize;
                @Gridsize.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnGridsize;
                @DivisionCount.started -= m_Wrapper.m_GridActionsCallbackInterface.OnDivisionCount;
                @DivisionCount.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnDivisionCount;
                @DivisionCount.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnDivisionCount;
                @PlaceOrigin.started -= m_Wrapper.m_GridActionsCallbackInterface.OnPlaceOrigin;
                @PlaceOrigin.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnPlaceOrigin;
                @PlaceOrigin.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnPlaceOrigin;
                @ToggleOrigin.started -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleOrigin;
                @ToggleOrigin.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleOrigin;
                @ToggleOrigin.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleOrigin;
                @ToggleAxis.started -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleAxis;
                @ToggleAxis.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleAxis;
                @ToggleAxis.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleAxis;
                @ToggleDividers.started -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleDividers;
                @ToggleDividers.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleDividers;
                @ToggleDividers.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnToggleDividers;
                @Modifier.started -= m_Wrapper.m_GridActionsCallbackInterface.OnModifier;
                @Modifier.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnModifier;
                @Modifier.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnModifier;
                @Cursor.started -= m_Wrapper.m_GridActionsCallbackInterface.OnCursor;
                @Cursor.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnCursor;
                @Cursor.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnCursor;
                @ChangeDrawingGroup.started -= m_Wrapper.m_GridActionsCallbackInterface.OnChangeDrawingGroup;
                @ChangeDrawingGroup.performed -= m_Wrapper.m_GridActionsCallbackInterface.OnChangeDrawingGroup;
                @ChangeDrawingGroup.canceled -= m_Wrapper.m_GridActionsCallbackInterface.OnChangeDrawingGroup;
            }
            m_Wrapper.m_GridActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Gridsize.started += instance.OnGridsize;
                @Gridsize.performed += instance.OnGridsize;
                @Gridsize.canceled += instance.OnGridsize;
                @DivisionCount.started += instance.OnDivisionCount;
                @DivisionCount.performed += instance.OnDivisionCount;
                @DivisionCount.canceled += instance.OnDivisionCount;
                @PlaceOrigin.started += instance.OnPlaceOrigin;
                @PlaceOrigin.performed += instance.OnPlaceOrigin;
                @PlaceOrigin.canceled += instance.OnPlaceOrigin;
                @ToggleOrigin.started += instance.OnToggleOrigin;
                @ToggleOrigin.performed += instance.OnToggleOrigin;
                @ToggleOrigin.canceled += instance.OnToggleOrigin;
                @ToggleAxis.started += instance.OnToggleAxis;
                @ToggleAxis.performed += instance.OnToggleAxis;
                @ToggleAxis.canceled += instance.OnToggleAxis;
                @ToggleDividers.started += instance.OnToggleDividers;
                @ToggleDividers.performed += instance.OnToggleDividers;
                @ToggleDividers.canceled += instance.OnToggleDividers;
                @Modifier.started += instance.OnModifier;
                @Modifier.performed += instance.OnModifier;
                @Modifier.canceled += instance.OnModifier;
                @Cursor.started += instance.OnCursor;
                @Cursor.performed += instance.OnCursor;
                @Cursor.canceled += instance.OnCursor;
                @ChangeDrawingGroup.started += instance.OnChangeDrawingGroup;
                @ChangeDrawingGroup.performed += instance.OnChangeDrawingGroup;
                @ChangeDrawingGroup.canceled += instance.OnChangeDrawingGroup;
            }
        }
    }
    public GridActions @Grid => new GridActions(this);

    // Default
    private readonly InputActionMap m_Default;
    private IDefaultActions m_DefaultActionsCallbackInterface;
    private readonly InputAction m_Default_ToggleShapes;
    private readonly InputAction m_Default_ToggleParabolas;
    public struct DefaultActions
    {
        private @Lab03Binds m_Wrapper;
        public DefaultActions(@Lab03Binds wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleShapes => m_Wrapper.m_Default_ToggleShapes;
        public InputAction @ToggleParabolas => m_Wrapper.m_Default_ToggleParabolas;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void SetCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
            {
                @ToggleShapes.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnToggleShapes;
                @ToggleShapes.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnToggleShapes;
                @ToggleShapes.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnToggleShapes;
                @ToggleParabolas.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnToggleParabolas;
                @ToggleParabolas.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnToggleParabolas;
                @ToggleParabolas.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnToggleParabolas;
            }
            m_Wrapper.m_DefaultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToggleShapes.started += instance.OnToggleShapes;
                @ToggleShapes.performed += instance.OnToggleShapes;
                @ToggleShapes.canceled += instance.OnToggleShapes;
                @ToggleParabolas.started += instance.OnToggleParabolas;
                @ToggleParabolas.performed += instance.OnToggleParabolas;
                @ToggleParabolas.canceled += instance.OnToggleParabolas;
            }
        }
    }
    public DefaultActions @Default => new DefaultActions(this);

    // Circle
    private readonly InputActionMap m_Circle;
    private ICircleActions m_CircleActionsCallbackInterface;
    private readonly InputAction m_Circle_ToggleCricle;
    private readonly InputAction m_Circle_MoveCircle;
    private readonly InputAction m_Circle_ChangeRadius;
    private readonly InputAction m_Circle_ChangeSideCount;
    public struct CircleActions
    {
        private @Lab03Binds m_Wrapper;
        public CircleActions(@Lab03Binds wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleCricle => m_Wrapper.m_Circle_ToggleCricle;
        public InputAction @MoveCircle => m_Wrapper.m_Circle_MoveCircle;
        public InputAction @ChangeRadius => m_Wrapper.m_Circle_ChangeRadius;
        public InputAction @ChangeSideCount => m_Wrapper.m_Circle_ChangeSideCount;
        public InputActionMap Get() { return m_Wrapper.m_Circle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CircleActions set) { return set.Get(); }
        public void SetCallbacks(ICircleActions instance)
        {
            if (m_Wrapper.m_CircleActionsCallbackInterface != null)
            {
                @ToggleCricle.started -= m_Wrapper.m_CircleActionsCallbackInterface.OnToggleCricle;
                @ToggleCricle.performed -= m_Wrapper.m_CircleActionsCallbackInterface.OnToggleCricle;
                @ToggleCricle.canceled -= m_Wrapper.m_CircleActionsCallbackInterface.OnToggleCricle;
                @MoveCircle.started -= m_Wrapper.m_CircleActionsCallbackInterface.OnMoveCircle;
                @MoveCircle.performed -= m_Wrapper.m_CircleActionsCallbackInterface.OnMoveCircle;
                @MoveCircle.canceled -= m_Wrapper.m_CircleActionsCallbackInterface.OnMoveCircle;
                @ChangeRadius.started -= m_Wrapper.m_CircleActionsCallbackInterface.OnChangeRadius;
                @ChangeRadius.performed -= m_Wrapper.m_CircleActionsCallbackInterface.OnChangeRadius;
                @ChangeRadius.canceled -= m_Wrapper.m_CircleActionsCallbackInterface.OnChangeRadius;
                @ChangeSideCount.started -= m_Wrapper.m_CircleActionsCallbackInterface.OnChangeSideCount;
                @ChangeSideCount.performed -= m_Wrapper.m_CircleActionsCallbackInterface.OnChangeSideCount;
                @ChangeSideCount.canceled -= m_Wrapper.m_CircleActionsCallbackInterface.OnChangeSideCount;
            }
            m_Wrapper.m_CircleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToggleCricle.started += instance.OnToggleCricle;
                @ToggleCricle.performed += instance.OnToggleCricle;
                @ToggleCricle.canceled += instance.OnToggleCricle;
                @MoveCircle.started += instance.OnMoveCircle;
                @MoveCircle.performed += instance.OnMoveCircle;
                @MoveCircle.canceled += instance.OnMoveCircle;
                @ChangeRadius.started += instance.OnChangeRadius;
                @ChangeRadius.performed += instance.OnChangeRadius;
                @ChangeRadius.canceled += instance.OnChangeRadius;
                @ChangeSideCount.started += instance.OnChangeSideCount;
                @ChangeSideCount.performed += instance.OnChangeSideCount;
                @ChangeSideCount.canceled += instance.OnChangeSideCount;
            }
        }
    }
    public CircleActions @Circle => new CircleActions(this);

    // Ellipse
    private readonly InputActionMap m_Ellipse;
    private IEllipseActions m_EllipseActionsCallbackInterface;
    private readonly InputAction m_Ellipse_ToggleEllipse;
    private readonly InputAction m_Ellipse_MoveEllipse;
    private readonly InputAction m_Ellipse_ChangeHorizontalAxis;
    private readonly InputAction m_Ellipse_ChangeVerticalAxis;
    private readonly InputAction m_Ellipse_ChangeSideCount;
    public struct EllipseActions
    {
        private @Lab03Binds m_Wrapper;
        public EllipseActions(@Lab03Binds wrapper) { m_Wrapper = wrapper; }
        public InputAction @ToggleEllipse => m_Wrapper.m_Ellipse_ToggleEllipse;
        public InputAction @MoveEllipse => m_Wrapper.m_Ellipse_MoveEllipse;
        public InputAction @ChangeHorizontalAxis => m_Wrapper.m_Ellipse_ChangeHorizontalAxis;
        public InputAction @ChangeVerticalAxis => m_Wrapper.m_Ellipse_ChangeVerticalAxis;
        public InputAction @ChangeSideCount => m_Wrapper.m_Ellipse_ChangeSideCount;
        public InputActionMap Get() { return m_Wrapper.m_Ellipse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EllipseActions set) { return set.Get(); }
        public void SetCallbacks(IEllipseActions instance)
        {
            if (m_Wrapper.m_EllipseActionsCallbackInterface != null)
            {
                @ToggleEllipse.started -= m_Wrapper.m_EllipseActionsCallbackInterface.OnToggleEllipse;
                @ToggleEllipse.performed -= m_Wrapper.m_EllipseActionsCallbackInterface.OnToggleEllipse;
                @ToggleEllipse.canceled -= m_Wrapper.m_EllipseActionsCallbackInterface.OnToggleEllipse;
                @MoveEllipse.started -= m_Wrapper.m_EllipseActionsCallbackInterface.OnMoveEllipse;
                @MoveEllipse.performed -= m_Wrapper.m_EllipseActionsCallbackInterface.OnMoveEllipse;
                @MoveEllipse.canceled -= m_Wrapper.m_EllipseActionsCallbackInterface.OnMoveEllipse;
                @ChangeHorizontalAxis.started -= m_Wrapper.m_EllipseActionsCallbackInterface.OnChangeHorizontalAxis;
                @ChangeHorizontalAxis.performed -= m_Wrapper.m_EllipseActionsCallbackInterface.OnChangeHorizontalAxis;
                @ChangeHorizontalAxis.canceled -= m_Wrapper.m_EllipseActionsCallbackInterface.OnChangeHorizontalAxis;
                @ChangeVerticalAxis.started -= m_Wrapper.m_EllipseActionsCallbackInterface.OnChangeVerticalAxis;
                @ChangeVerticalAxis.performed -= m_Wrapper.m_EllipseActionsCallbackInterface.OnChangeVerticalAxis;
                @ChangeVerticalAxis.canceled -= m_Wrapper.m_EllipseActionsCallbackInterface.OnChangeVerticalAxis;
                @ChangeSideCount.started -= m_Wrapper.m_EllipseActionsCallbackInterface.OnChangeSideCount;
                @ChangeSideCount.performed -= m_Wrapper.m_EllipseActionsCallbackInterface.OnChangeSideCount;
                @ChangeSideCount.canceled -= m_Wrapper.m_EllipseActionsCallbackInterface.OnChangeSideCount;
            }
            m_Wrapper.m_EllipseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ToggleEllipse.started += instance.OnToggleEllipse;
                @ToggleEllipse.performed += instance.OnToggleEllipse;
                @ToggleEllipse.canceled += instance.OnToggleEllipse;
                @MoveEllipse.started += instance.OnMoveEllipse;
                @MoveEllipse.performed += instance.OnMoveEllipse;
                @MoveEllipse.canceled += instance.OnMoveEllipse;
                @ChangeHorizontalAxis.started += instance.OnChangeHorizontalAxis;
                @ChangeHorizontalAxis.performed += instance.OnChangeHorizontalAxis;
                @ChangeHorizontalAxis.canceled += instance.OnChangeHorizontalAxis;
                @ChangeVerticalAxis.started += instance.OnChangeVerticalAxis;
                @ChangeVerticalAxis.performed += instance.OnChangeVerticalAxis;
                @ChangeVerticalAxis.canceled += instance.OnChangeVerticalAxis;
                @ChangeSideCount.started += instance.OnChangeSideCount;
                @ChangeSideCount.performed += instance.OnChangeSideCount;
                @ChangeSideCount.canceled += instance.OnChangeSideCount;
            }
        }
    }
    public EllipseActions @Ellipse => new EllipseActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IGridActions
    {
        void OnGridsize(InputAction.CallbackContext context);
        void OnDivisionCount(InputAction.CallbackContext context);
        void OnPlaceOrigin(InputAction.CallbackContext context);
        void OnToggleOrigin(InputAction.CallbackContext context);
        void OnToggleAxis(InputAction.CallbackContext context);
        void OnToggleDividers(InputAction.CallbackContext context);
        void OnModifier(InputAction.CallbackContext context);
        void OnCursor(InputAction.CallbackContext context);
        void OnChangeDrawingGroup(InputAction.CallbackContext context);
    }
    public interface IDefaultActions
    {
        void OnToggleShapes(InputAction.CallbackContext context);
        void OnToggleParabolas(InputAction.CallbackContext context);
    }
    public interface ICircleActions
    {
        void OnToggleCricle(InputAction.CallbackContext context);
        void OnMoveCircle(InputAction.CallbackContext context);
        void OnChangeRadius(InputAction.CallbackContext context);
        void OnChangeSideCount(InputAction.CallbackContext context);
    }
    public interface IEllipseActions
    {
        void OnToggleEllipse(InputAction.CallbackContext context);
        void OnMoveEllipse(InputAction.CallbackContext context);
        void OnChangeHorizontalAxis(InputAction.CallbackContext context);
        void OnChangeVerticalAxis(InputAction.CallbackContext context);
        void OnChangeSideCount(InputAction.CallbackContext context);
    }
}
